/*********************************************
 * OPL 12.8.0.0 Model
 * Author: Alessandro
 * Creation Date: 21/giu/2022 at 17:26:14
 *********************************************/
 int M =...;	//Numero giorni
 int N =...;	//Numero esami
 int L=...;		//Numero laboratori
 int A=...;		//Numero aule
 int S=...;		//Numero della sessione
 int MI=...;	//Valore di maxIncrease
 int DMA=...;	//Distanza minima tra appelli dello stesso esame
 int DMAS=...;	//Distanza minima appelli dello stesso semestre
 int LNAE[1..N]=...;	//Lista associazione numero appelli - esami
 int LAE[1..N][1..3] =...;	//Lista associazione anni - esami (Falso booleano)
 int LSE[1..N][1..2] =...;	//Lista associazione semestri - esami (Falso booleano)
 int LRLE[1..N][1..L]=...;	//Lista associazione risorse di laboratorio - esami
 int LRAE[1..N][1..A]=...;	//Lista associazione risorse aule - esami
 float PGE[1..N][1..M]=...;	//Lista preferenze giorno - esame
 
 
 
 
 range giorni= 1..M;
 range esami = 1..N;
 
 int distanza_minima_stesso_semestre=...;
 
 dvar boolean x [esami][giorni];
 dvar int dummy;
 
 minimize dummy;
 
 subject to {
	//Vincoli di prova
	
 	//Per ogni esame lo assegno una sola volta
  	forall(esame in esami)sum(giorno in giorni) x[esame][giorno] == 1;
  	//Per ogni coppia di esami devono essere almeno distanti dummy+distanza_minima_stesso_semestre
 	forall(esame1 in esami, giorno1 in giorni) forall(esame2 in esami, giorno2 in giorni) 
 		 if(esame1!=esame2)	//If è sostituibile moltiplicando entrambe le parti per abs(esame1-esame2)
 		 	((abs(giorno1-giorno2)-1) *(x[esame2][giorno2]* x[esame1][giorno1])) //Distanza tra i due giorni se sono entrambi a 1
 		 			 + (M * (1 - (x[esame2][giorno2]* x[esame1][giorno1])))//Numero dei giorni totale se almeno uno è a 0
 		 			  >= distanza_minima_stesso_semestre-dummy;	//Distanza minima
	
	//Vincoli veri
	
	//Dummy deve essere sempre almeno positiva se no minimizzando andiamo in negativo
	MinimoDummy: dummy >= 0;
	 //Per ogni esame lo assegno pari al suo numero di appelli
  	forall(esame in esami)sum(giorno in giorni) x[esame][giorno] == LNAE[esame];
}